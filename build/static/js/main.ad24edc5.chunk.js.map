{"version":3,"sources":["components/InputBox.js","components/DeleteButton.js","components/TodoTask.js","components/TaskList.js","components/Header.js","components/todoApi.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","props","useState","inputText","text","setText","className","value","onChange","event","target","onKeyDown","keyCode","onEnter","AddDeleteBtn","Component","onClick","deleteTask","id","task","updateTask","status","TaskList","tasks","taskList","map","key","HeaderWithDeleteBtn","editMode","header","Header","isEditMode","setOnEditMode","postReq","url","data","fetch","method","headers","body","JSON","stringify","then","res","json","taskId","Todo","todoList","setTodoList","setHeader","updateTodo","todoApi","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad24edc5.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst InputBox = (props) => {\n  const [text, setText] = useState(props.inputText || '');\n\n  const handleKeyPress = (event) => {\n    const text = event.target.value;\n    if (event.keyCode === 13 && text !== '') {\n      props.onEnter(event.target.value);\n      setText('');\n    }\n  };\n\n  return (\n    <input\n      className=\"inputTag\"\n      value={text}\n      onChange={(event) => setText(event.target.value)}\n      onKeyDown={handleKeyPress}\n    />\n  );\n};\n\nexport default InputBox;\n","import React from 'react';\n\nconst AddDeleteBtn = function (Component) {\n  return function (props) {\n    return (\n      <div className=\"container\">\n        <Component {...props} />\n        <div className=\"deleteBtn\" onClick={() => props.deleteTask(props.id)}>\n          X\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default AddDeleteBtn;\n","import React from 'react';\nimport AddDeleteBtn from './DeleteButton';\n\nconst TodoTask = ({ task, updateTask }) => {\n  return (\n    <div className={`displayTodoTask ${task.status}`}>\n      <span className=\"statusBox\"></span>\n      <span onClick={() => updateTask(task.id)} className=\"text\">\n        {task.text}\n      </span>\n    </div>\n  );\n};\n\nexport default AddDeleteBtn(TodoTask);\n","import React from 'react';\nimport TodoTask from './TodoTask';\n\nconst TaskList = function (props) {\n  const { tasks, updateTask, deleteTask } = props;\n  const taskList = tasks.map((task) => {\n    return (\n      <TodoTask\n        task={task}\n        key={task.id}\n        id={task.id}\n        updateTask={updateTask}\n        deleteTask={deleteTask}\n      />\n    );\n  });\n  return <div>{taskList}</div>;\n};\n\nexport default TaskList;\n","import React, { useState } from 'react';\nimport InputBox from './InputBox';\nimport AddDeleteBtn from './DeleteButton';\n\nconst DisplayHeaderText = (props) => (\n  <div className=\"header\">\n    <span onClick={props.editMode}>{props.header}</span>\n  </div>\n);\n\nconst HeaderWithDeleteBtn = AddDeleteBtn(DisplayHeaderText);\n\nconst Header = (props) => {\n  const [isEditMode, setOnEditMode] = useState(false);\n\n  const updateHeader = (text) => {\n    props.onEnter(text);\n    setOnEditMode(false);\n  };\n\n  const editMode = () => {\n    setOnEditMode(true);\n  };\n\n  if (isEditMode)\n    return (\n      <div className=\"header\">\n        <InputBox onEnter={updateHeader} inputText={props.header} />\n      </div>\n    );\n\n  return (\n    <HeaderWithDeleteBtn\n      header={props.header}\n      editMode={editMode}\n      deleteTask={props.deleteTask}\n    />\n  );\n};\n\nexport default Header;\n","const postReq = (url, data) => {\n  return fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  });\n};\n\nconst getTodo = () => fetch('/api/getTodo').then((res) => res.json());\n\nconst deleteTasks = () => {\n  return postReq('/api/deleteTasks');\n};\n\nconst updateHeader = (header) => {\n  return postReq('/api/updateHeader', { header });\n};\n\nconst updateTask = (taskId) => {\n  return postReq('/api/updateTask', { taskId });\n};\n\nconst createTask = (text) => {\n  return postReq('/api/createTask', { text });\n};\n\nconst deleteTask = (taskId) => {\n  return postReq('/api/deleteTask', { taskId });\n};\n\nexport default {\n  getTodo,\n  deleteTasks,\n  updateHeader,\n  updateTask,\n  createTask,\n  deleteTask,\n};\n","import React, { useState, useEffect } from 'react';\nimport InputBox from './InputBox';\nimport TaskList from './TaskList';\nimport Header from './Header';\nimport '../todo.css';\nimport todoApi from './todoApi';\n\nconst Todo = function (props) {\n  const [todoList, setTodoList] = useState([]);\n  const [header, setHeader] = useState('');\n\n  const updateTodo = () =>\n    todoApi.getTodo().then(({ todoList, header }) => {\n      setTodoList(todoList);\n      setHeader(header);\n    });\n\n  useEffect(() => {\n    updateTodo();\n  }, []);\n\n  const deleteTasks = function () {\n    todoApi.deleteTasks().then(updateTodo);\n  };\n\n  const updateHeader = function (header) {\n    todoApi.updateHeader(header).then(updateTodo);\n  };\n\n  const updateTask = function (taskId) {\n    todoApi.updateTask(taskId).then(updateTodo);\n  };\n\n  const createTask = function (text) {\n    todoApi.createTask(text).then(updateTodo);\n  };\n\n  const deleteTask = function (taskId) {\n    todoApi.deleteTask(taskId).then(updateTodo);\n  };\n\n  return (\n    <div className=\"todoBox\">\n      <Header header={header} onEnter={updateHeader} deleteTask={deleteTasks} />\n\n      <TaskList\n        tasks={todoList}\n        updateTask={updateTask}\n        deleteTask={deleteTask}\n      />\n\n      <InputBox onEnter={createTask} />\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './components/Todo.js';\n\nconst App = () => {\n  return <Todo />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}